<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>MbUnit</name>
  </assembly>
  <members>
    <member name="T:MbUnit.Core.MbUnitTestFrameworkExtension">
      <summary>A <see cref="T:Gallio.Framework.Pattern.IPatternTestFrameworkExtension" /> that registers MbUnit as a tool when the test assembly contains a reference to the MbUnit assembly.</summary>
    </member>
    <member name="M:MbUnit.Core.MbUnitTestFrameworkExtension.GetReferencedTools(Gallio.Reflection.IAssemblyInfo)">
      <summary>
        <para> Gets information about the tools that are used by the specified test assembly. The tool information will be included in the report as part of the framework node that contains the assembly. </para>
        <para> This method is used by authors of tools that are derived from the <see cref="T:Gallio.Framework.Pattern.PatternTestFramework" /> to provide brand and version information about the tool so that it will be visible to end users. </para>
        <para> If no tools are referenced by the assembly, it will be ignored by the <see cref="T:Gallio.Framework.Pattern.PatternTestExplorer" />. </para>
      </summary>
      <param name="assembly">The test assembly</param>
      <returns>The tool information</returns>
    </member>
    <member name="T:MbUnit.Framework.AnnotationAttribute">
      <summary>Associates an annotation message of the specified type with the code element.</summary>
    </member>
    <member name="T:MbUnit.Framework.ApartmentStateAttribute">
      <summary>Sets the apartment state to be used to run the decorated test.</summary>
    </member>
    <member name="P:MbUnit.Framework.ApartmentStateAttribute.ApartmentState">
      <summary>Gets the apartment state to be used to run the decorated test.</summary>
    </member>
    <member name="M:MbUnit.Framework.ApartmentStateAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a test. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.AssemblyFixtureAttribute">
      <summary>Declares that a class contains assembly-level setup and teardown methods.</summary>
    </member>
    <member name="M:MbUnit.Framework.AssemblyFixtureAttribute.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)">
      <summary>
        <para> Consumes a code element and applies its contributions to the scope provided by a containing pattern. </para>
        <para> This method is used to declare new tests, test parameters and other components and add them to a containing test that was defined in some other scope. </para>
        <para> For example, when enumerating test fixtures, the assembly-level pattern will call the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)" /> method of the primary patterns associated with each type in an assembly. Some of these patterns will create new test fixture objects and add them as children of the containing assembly-level test. They will then call the <see cref="M:Gallio.Framework.Pattern.IPattern.Process(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)" /> method of each non-primary pattern associated with the type within the scope of the test fixture. Then they will typically recurse into the fixture to apply contributions defined by patterns associated with methods, fields, properties, events, constructors and generic type parameters. </para>
      </summary>
      <param name="containingScope">The containing scope</param>
      <param name="codeElement">The code element to process</param>
      <param name="skipChildren">If true, skips generating child test components. Instead the children may be populated on demand using <see cref="M:Gallio.Framework.Pattern.IPatternScope.AddDeferredComponentPopulator(Gallio.Framework.Pattern.DeferredComponentPopulator)" />. The implementation may safely ignore the value of this flag so long as subsequent attempts to populate children on demand are idempotent (do nothing or have no adverse side-effects).</param>
    </member>
    <member name="M:MbUnit.Framework.AssemblyFixtureAttribute.SetTestSemantics(Gallio.Framework.Pattern.ITestBuilder,Gallio.Reflection.ITypeInfo)">
      <summary>
        <para> Applies semantic actions to a test to estalish its runtime behavior. </para>
        <para> This method is called after <see cref="M:Gallio.Framework.Pattern.TestTypePatternAttribute.InitializeTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ITypeInfo)" />. </para>
      </summary>
      <param name="testBuilder">The test builder</param>
      <param name="type">The test type</param>
    </member>
    <member name="M:MbUnit.Framework.AssemblyFixtureAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ITypeInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="type">The type</param>
    </member>
    <member name="T:MbUnit.Framework.AssemblyResolverAttribute">
      <summary>Registers a custom assembly resolver. This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.AssemblyResolverAttribute.AssemblyResolverType">
      <summary>Gets the assembly resolver type.</summary>
    </member>
    <member name="M:MbUnit.Framework.AssemblyResolverAttribute.Initialize(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.IAssemblyInfo)">
      <summary>Performs early initialization for the specified assembly.</summary>
      <param name="frameworkScope">The framework-level scope that will eventually contain the assembly-level test</param>
      <param name="assembly">The assembly to process</param>
    </member>
    <member name="T:MbUnit.Framework.Assert">
      <summary>Defines a set of assertions that enable a test to verify the expected behavior of the subject under test. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.Assert.Over">
      <summary>Provides methods for composing assertions to map over complex data structures.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreApproximatelyEqual``2(``0,``0,``1)">
      <summary>Verifies that an actual value approximately equals some expected value to within a specified delta.</summary>
      <typeparam name="TValue">The type of values to be compared</typeparam>
      <typeparam name="TDifference">The type of the difference produced when the values are subtracted, for numeric types this is the same as <typeparamref name="TValue" /> but it may differ for other types</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="delta">The inclusive delta between the values</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreApproximatelyEqual``2(``0,``0,``1,System.String,System.Object[])">
      <summary>Verifies that an actual value approximately equals some expected value to within a specified delta.</summary>
      <typeparam name="TValue">The type of values to be compared</typeparam>
      <typeparam name="TDifference">The type of the difference produced when the values are subtracted, for numeric types this is the same as <typeparamref name="TValue" /> but it may differ for other types</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="delta">The inclusive delta between the values</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal and in the same order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal and in the same order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Func{``0,``0,System.Boolean})">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal and in the same order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Func{``0,``0,System.Boolean},System.String,System.Object[])">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal and in the same order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqualIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal but perhaps in a different order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqualIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal but perhaps in a different order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqualIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Func{``0,``0,System.Boolean})">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal but perhaps in a different order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqualIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Func{``0,``0,System.Boolean},System.String,System.Object[])">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal but perhaps in a different order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsNotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Verifies that unexpected and actual sequences differ in at least one element.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedSequence">The unexpected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsNotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
      <summary>Verifies that unexpected and actual sequences differ in at least one element.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedSequence">The unexpected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsNotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Func{``0,``0,System.Boolean})">
      <summary>Verifies that unexpected and actual sequences differ in at least one element.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedSequence">The unexpected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsNotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Func{``0,``0,System.Boolean},System.String,System.Object[])">
      <summary>Verifies that unexpected and actual sequences differ in at least one element.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedSequence">The unexpected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0)">
      <summary>Verifies that an actual value equals some expected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an actual value equals some expected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Verifies that an actual value equals some expected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
      <summary>Verifies that an actual value equals some expected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0,Gallio.Func{``0,``0,System.Boolean})">
      <summary>Verifies that an actual value equals some expected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0,Gallio.Func{``0,``0,System.Boolean},System.String,System.Object[])">
      <summary>Verifies that an actual value equals some expected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.String,System.String,System.StringComparison)">
      <summary>Asserts that two strings are equal according to a particular string comparison mode.</summary>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparisonType">The string comparison type</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.String,System.String,System.StringComparison,System.String,System.Object[])">
      <summary>Asserts that two strings are equal according to a particular string comparison mode.</summary>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparisonType">The string comparison type</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotApproximatelyEqual``2(``0,``0,``1)">
      <summary>Verifies that an actual value does not approximately equal some unexpected value to within a specified delta.</summary>
      <typeparam name="TValue">The type of values to be compared</typeparam>
      <typeparam name="TDifference">The type of the difference produced when the values are subtracted, for numeric types this is the same as <typeparamref name="TValue" /> but it may differ for other types</typeparam>
      <param name="unexpectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="delta">The inclusive delta between the values</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotApproximatelyEqual``2(``0,``0,``1,System.String,System.Object[])">
      <summary>Verifies that an actual value does not approximately equal some unexpected value to within a specified delta.</summary>
      <typeparam name="TValue">The type of values to be compared</typeparam>
      <typeparam name="TDifference">The type of the difference produced when the values are subtracted, for numeric types this is the same as <typeparamref name="TValue" /> but it may differ for other types</typeparam>
      <param name="unexpectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="delta">The inclusive delta between the values</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0)">
      <summary>Verifies that an actual value does not equal some unexpected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an actual value does not equal some unexpected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Verifies that an actual value does not equal some unexpected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
      <summary>Verifies that an actual value does not equal some unexpected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0,Gallio.Func{``0,``0,System.Boolean})">
      <summary>Verifies that an actual value does not equal some unexpected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0,Gallio.Func{``0,``0,System.Boolean},System.String,System.Object[])">
      <summary>Verifies that an actual value does not equal some unexpected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.String,System.String,System.StringComparison)">
      <summary>Asserts that two strings are not equal according to a particular string comparison mode.</summary>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparisonType">The string comparison type</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.String,System.String,System.StringComparison,System.String,System.Object[])">
      <summary>Asserts that two strings are not equal according to a particular string comparison mode.</summary>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparisonType">The string comparison type</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotSame``1(``0,``0)">
      <summary>Verifies that an actual value is not referentially identical to some unexpected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotSame``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an actual value is not referentially identical to some unexpected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreSame``1(``0,``0)">
      <summary>Verifies that an actual value is referentially identical to some expected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreSame``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an actual value is referentially identical to some expected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between``1(``0,``0,``0)">
      <summary>Verifies that a test value is between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between``1(``0,``0,``0,System.String,System.Object[])">
      <summary>Verifies that a test value is between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between``1(``0,``0,``0,System.Comparison{``0})">
      <summary>Verifies that a test value is between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between``1(``0,``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>Verifies that a test value is between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Verifies that <paramref name="expectedValue" /> is in the enumeration <paramref name="enumeration" />.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="enumeration">The enumeration of items</param>
      <param name="expectedValue">The expected value expected to be found in the collection</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.String,System.Object[])">
      <summary>Verifies that <paramref name="expectedValue" /> is in the enumeration <paramref name="enumeration" />.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="enumeration">The enumeration of items</param>
      <param name="expectedValue">The expected value expected to be found in the collection</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Contains(System.String,System.String)">
      <summary>Verifies that a string contains some expected value.</summary>
      <param name="actualValue">The actual value</param>
      <param name="expectedSubstring">The expected substring</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedSubstring" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Contains(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that a string contains some expected value.</summary>
      <param name="actualValue">The actual value</param>
      <param name="expectedSubstring">The expected substring</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedSubstring" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.ContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
      <summary>Verifies that <paramref name="expectedKey" /> is in the dictionary <paramref name="dictionary" />.</summary>
      <typeparam name="TKey">The type of key</typeparam>
      <typeparam name="TValue">The type of value</typeparam>
      <param name="dictionary">The dictionary of items</param>
      <param name="expectedKey">The key expected to be found in the dictionary</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.ContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.String,System.Object[])">
      <summary>Verifies that <paramref name="expectedKey" /> is in the dictionary <paramref name="dictionary" />.</summary>
      <typeparam name="TKey">The type of key</typeparam>
      <typeparam name="TValue">The type of value</typeparam>
      <param name="dictionary">The dictionary of items</param>
      <param name="expectedKey">The key expected to be found in the dictionary</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Verifies that <paramref name="unexpectedValue" /> is not in the enumeration <paramref name="enumeration" />.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="enumeration">The enumeration of items</param>
      <param name="unexpectedValue">The unexpected value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},``0,System.String,System.Object[])">
      <summary>Verifies that <paramref name="unexpectedValue" /> is not in the enumeration <paramref name="enumeration" />.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="enumeration">The enumeration of items</param>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContain(System.String,System.String)">
      <summary>Verifies that a string does not contain some unexpected substring.</summary>
      <param name="actualValue">The actual value</param>
      <param name="unexpectedSubstring">The unexpected substring</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="unexpectedSubstring" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContain(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that a string does not contain some unexpected substring.</summary>
      <param name="actualValue">The actual value</param>
      <param name="unexpectedSubstring">The unexpected substring</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="unexpectedSubstring" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContainKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
      <summary>Verifies that <paramref name="unexpectedKey" /> is not in the dictionary <paramref name="dictionary" />.</summary>
      <typeparam name="TKey">The type of key</typeparam>
      <typeparam name="TValue">The type of value</typeparam>
      <param name="dictionary">The dictionary of items</param>
      <param name="unexpectedKey">The key that should not be found in the dictionary</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContainKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.String,System.Object[])">
      <summary>Verifies that <paramref name="unexpectedKey" /> is not in the dictionary <paramref name="dictionary" />.</summary>
      <typeparam name="TKey">The type of key</typeparam>
      <typeparam name="TValue">The type of value</typeparam>
      <param name="dictionary">The dictionary of items</param>
      <param name="unexpectedKey">The key expected to be found in the dictionary</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotThrow(Gallio.Action)">
      <summary>Verifies that a block of code does not throw an exception of any type.</summary>
      <param name="action">The action delegate to evaluate</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotThrow(Gallio.Action,System.String,System.Object[])">
      <summary>Verifies that a block of code does not throw an exception of any type.</summary>
      <param name="action">The action delegate to evaluate</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.EndsWith(System.String,System.String)">
      <summary>Verifies that a string ends with the specified text.</summary>
      <param name="actualValue">The actual value</param>
      <param name="expectedText">The expected pattern</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedText" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.EndsWith(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that a string ends with the specified text.</summary>
      <param name="actualValue">The actual value</param>
      <param name="expectedText">The expected pattern</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedText" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Equals(System.Object,System.Object)">
      <summary>Always throws an <see cref="T:System.InvalidOperationException" />. Use <see cref="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0)" /> instead.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Fail">
      <summary>Signals an unconditional assertion failure.</summary>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Fail(System.String,System.Object[])">
      <summary>Signals an unconditional assertion failure with a particular message.</summary>
      <param name="messageFormat">The format of the assertion failure message</param>
      <param name="messageArgs">The arguments for the assertion failure message format string</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.String)">
      <summary>Verifies that a string matches regular expression pattern exactly.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regexPattern">The regular expression pattern</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that a string matches regular expression pattern exactly.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regexPattern">The regular expression pattern</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Verifies that a string matches regular expression pattern exactly.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regexPattern">The regular expression pattern</param>
      <param name="regexOptions">The regular expression options</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.Object[])">
      <summary>Verifies that a string matches regular expression pattern exactly.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regexPattern">The regular expression pattern</param>
      <param name="regexOptions">The regular expression options</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.Text.RegularExpressions.Regex)">
      <summary>Verifies that a string matches regular expression pattern exactly.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regex">The regular expression</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regex" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
      <summary>Verifies that a string matches regular expression pattern exactly.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regex">The regular expression</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regex" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan``1(``0,``0)">
      <summary>Verifies that an left value is greater than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an left value is greater than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan``1(``0,``0,System.Comparison{``0})">
      <summary>Verifies that an left value is greater than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan``1(``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>Verifies that an left value is greater than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThanOrEqualTo``1(``0,``0)">
      <summary>Verifies that an left value is greater or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThanOrEqualTo``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an left value is greater or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThanOrEqualTo``1(``0,``0,System.Comparison{``0})">
      <summary>Verifies that an left value is greater or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThanOrEqualTo``1(``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>Verifies that an left value is greater or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Inconclusive">
      <summary>Signals that a test has yielded an inconclusive result.</summary>
      <exception cref="T:Gallio.Framework.TestInconclusiveException">Thrown always</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Inconclusive(System.String,System.Object[])">
      <summary>Signals that a test has yielded an inconclusive result.</summary>
      <param name="messageFormat">The custom message format string, or null if none</param>
      <param name="messageArgs">The custom message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.TestInconclusiveException">Thrown always</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object)">
      <summary>Verifies that an object may be assigned to a variable of the specified type.</summary>
      <param name="expectedType">The Type to compare with the object's Type</param>
      <param name="actualValue">The object under examination</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
      <summary>Verifies that an object may be assigned to a variable of the specified type.</summary>
      <param name="expectedType">The Type to compare with the object's Type</param>
      <param name="actualValue">The object under examination</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.Collections.IEnumerable)">
      <summary>Verifies that an actual value contains no elements.</summary>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
      <summary>Verifies that an actual value contains no elements.</summary>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsFalse(System.Boolean)">
      <summary>Verifies that an actual value is false.</summary>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
      <summary>Verifies that an actual value is false.</summary>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object)">
      <summary>Verifies that an actual value is an instance of some expected type.</summary>
      <param name="expectedType">The expected type</param>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedType" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
      <summary>Verifies that an actual value is an instance of some expected type.</summary>
      <param name="expectedType">The expected type</param>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedType" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object)">
      <summary>Verifies that an object may not be assigned to a variable of the specified type.</summary>
      <param name="expectedType">The Type to compare with the object's Type</param>
      <param name="actualValue">The object under examination</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
      <summary>Verifies that an object may not be assigned to a variable of the specified type.</summary>
      <param name="expectedType">The Type to compare with the object's Type</param>
      <param name="actualValue">The object under examination</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.Collections.IEnumerable)">
      <summary>Verifies that an actual value contains at least one element.</summary>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
      <summary>Verifies that an actual value contains at least one element.</summary>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object)">
      <summary>Verifies that an actual value is not an instance of some unexpected type.</summary>
      <param name="unexpectedType">The unexpected type</param>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="unexpectedType" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
      <summary>Verifies that an actual value is not an instance of some unexpected type.</summary>
      <param name="unexpectedType">The unexpected type</param>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="unexpectedType" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotNull(System.Object)">
      <summary>Verifies that an actual value is not null.</summary>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])">
      <summary>Verifies that an actual value is not null.</summary>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNull(System.Object)">
      <summary>Verifies that an actual value is null.</summary>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])">
      <summary>Verifies that an actual value is null.</summary>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsTrue(System.Boolean)">
      <summary>Verifies that an actual value is true.</summary>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
      <summary>Verifies that an actual value is true.</summary>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThan``1(``0,``0)">
      <summary>Verifies that an left value is less than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThan``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an left value is less than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThan``1(``0,``0,System.Comparison{``0})">
      <summary>Verifies that an left value is less than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThan``1(``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>Verifies that an left value is less than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThanOrEqualTo``1(``0,``0)">
      <summary>Verifies that an left value is less or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThanOrEqualTo``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an left value is less or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThanOrEqualTo``1(``0,``0,System.Comparison{``0})">
      <summary>Verifies that an left value is less or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThanOrEqualTo``1(``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>Verifies that an left value is less or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.String)">
      <summary>Verifies that a string contains a full or partial match of a regular expression pattern.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regexPattern">The regular expression pattern</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that a string contains a full or partial match of a regular expression pattern.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regexPattern">The regular expression pattern</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Verifies that a string contains a full or partial match of a regular expression pattern.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regexPattern">The regular expression pattern</param>
      <param name="regexOptions">The regular expression options</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.Object[])">
      <summary>Verifies that a string contains a full or partial match of a regular expression pattern.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regexPattern">The regular expression pattern</param>
      <param name="regexOptions">The regular expression options</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.Text.RegularExpressions.Regex)">
      <summary>Verifies that a string contains a full or partial match of a regular expression pattern.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regex">The regular expression</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regex" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
      <summary>Verifies that a string contains a full or partial match of a regular expression pattern.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regex">The regular expression</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regex" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Multiple(Gallio.Action)">
      <summary>Evaluates a block of code that contains multiple related assertions.</summary>
      <param name="action">The action to invoke</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Multiple(Gallio.Action,System.String,System.Object[])">
      <summary>Evaluates a block of code that contains multiple related assertions.</summary>
      <param name="action">The action to invoke</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween``1(``0,``0,``0)">
      <summary>Verifies that a test value is not between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween``1(``0,``0,``0,System.String,System.Object[])">
      <summary>Verifies that a test value is not between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween``1(``0,``0,``0,System.Comparison{``0})">
      <summary>Verifies that a test value is not between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween``1(``0,``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>Verifies that a test value is not between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.String)">
      <summary>Verifies that a string does not contain a full or partial match of a regular expression pattern.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regexPattern">The regular expression pattern</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that a string does not contain a full or partial match of a regular expression pattern.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regexPattern">The regular expression pattern</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Verifies that a string does not contain a full or partial match of a regular expression pattern.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regexPattern">The regular expression pattern</param>
      <param name="regexOptions">The regular expression options</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.Object[])">
      <summary>Verifies that a string does not contain a full or partial match of a regular expression pattern.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regexPattern">The regular expression pattern</param>
      <param name="regexOptions">The regular expression options</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.Text.RegularExpressions.Regex)">
      <summary>Verifies that a string does not contain a full or partial match of a regular expression pattern.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regex">The regular expression</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regex" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
      <summary>Verifies that a string does not contain a full or partial match of a regular expression pattern.</summary>
      <param name="actualValue">The actual value</param>
      <param name="regex">The regular expression</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regex" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.ReferenceEquals(System.Object,System.Object)">
      <summary>Always throws an <see cref="T:System.InvalidOperationException" />. Use <see cref="M:MbUnit.Framework.Assert.AreSame``1(``0,``0)" /> instead.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.StartsWith(System.String,System.String)">
      <summary>Verifies that a string starts with the specified text.</summary>
      <param name="actualValue">The actual value</param>
      <param name="expectedText">The expected pattern</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedText" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.StartsWith(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that a string starts with the specified text.</summary>
      <param name="actualValue">The actual value</param>
      <param name="expectedText">The expected pattern</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedText" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws``1(Gallio.Action)">
      <summary>Verifies that a block of code throws an exception of a particular type.</summary>
      <typeparam name="TExpectedException">The expected type of exception</typeparam>
      <param name="action">The action delegate to evaluate</param>
      <returns>The exception that was thrown</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws``1(Gallio.Action,System.String,System.Object[])">
      <summary>Verifies that a block of code throws an exception of a particular type.</summary>
      <typeparam name="TExpectedException">The expected type of exception</typeparam>
      <param name="action">The action delegate to evaluate</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <returns>The exception that was thrown</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws(System.Type,Gallio.Action)">
      <summary>Verifies that a block of code throws an exception of a particular type.</summary>
      <param name="expectedExceptionType">The expected exception type</param>
      <param name="action">The action delegate to evaluate</param>
      <returns>The exception that was thrown</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedExceptionType" /> or <paramref name="action" /> is null</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws(System.Type,Gallio.Action,System.String,System.Object[])">
      <summary>Verifies that a block of code throws an exception of a particular type.</summary>
      <param name="expectedExceptionType">The expected exception type</param>
      <param name="action">The action delegate to evaluate</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <returns>The exception that was thrown</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedExceptionType" /> or <paramref name="action" /> is null</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="T:MbUnit.Framework.AssertOverSyntax">
      <summary>Defines methods used with the <see cref="P:MbUnit.Framework.Assert.Over" /> syntax for mapping assertions over complex data structures. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.KeyedPairs``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2},Gallio.Action{``1,``2})">
      <summary>Evaluates an assertion over key/value pairs with identical keys drawn from two dictionaries.</summary>
      <typeparam name="TKey">The key type</typeparam>
      <typeparam name="TLeftValue">The expected value type</typeparam>
      <typeparam name="TRightValue">The expected value type</typeparam>
      <param name="leftDictionary">The left dictionary, or null</param>
      <param name="rightDictionary">The right dictionary, or null</param>
      <param name="assertion">The assertion to evaluate over all pairs, with the left value as first argument, and right value as second</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.KeyedPairs``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2},Gallio.Action{``0,``1,``2})">
      <summary>Evaluates an assertion over key/value pairs with identical keys drawn from two dictionaries.</summary>
      <typeparam name="TKey">The key type</typeparam>
      <typeparam name="TLeftValue">The expected value type</typeparam>
      <typeparam name="TRightValue">The expected value type</typeparam>
      <param name="leftDictionary">The left dictionary, or null</param>
      <param name="rightDictionary">The right dictionary, or null</param>
      <param name="assertion">The assertion to evaluate over all pairs, with the key as first argument, left value as second, and right value as third</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.KeyedPairs``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2},Gallio.Action{``1,``2},System.String,System.Object[])">
      <summary>Evaluates an assertion over key/value pairs with identical keys drawn from two dictionaries.</summary>
      <typeparam name="TKey">The key type</typeparam>
      <typeparam name="TLeftValue">The expected value type</typeparam>
      <typeparam name="TRightValue">The expected value type</typeparam>
      <param name="leftDictionary">The left dictionary, or null</param>
      <param name="rightDictionary">The right dictionary, or null</param>
      <param name="assertion">The assertion to evaluate over all pairs, with the left value as first argument, and right value as second</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.KeyedPairs``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2},Gallio.Action{``0,``1,``2},System.String,System.Object[])">
      <summary>Evaluates an assertion over key/value pairs with identical keys drawn from two dictionaries.</summary>
      <typeparam name="TKey">The key type</typeparam>
      <typeparam name="TLeftValue">The expected value type</typeparam>
      <typeparam name="TRightValue">The expected value type</typeparam>
      <param name="leftDictionary">The left dictionary, or null</param>
      <param name="rightDictionary">The right dictionary, or null</param>
      <param name="assertion">The assertion to evaluate over all pairs, with the key as first argument, left value as second, and right value as third</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.Pairs``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Gallio.Action{``0,``1})">
      <summary>Evaluates an assertion over pairs of values taken from two sequences.</summary>
      <typeparam name="TLeftValue">The left value type</typeparam>
      <typeparam name="TRightValue">The right value type</typeparam>
      <param name="leftSequence">The left sequence, or null</param>
      <param name="rightSequence">The right sequence, or null</param>
      <param name="assertion">The assertion to evaluate given a left value and a right value</param>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.Pairs``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Gallio.Action{``0,``1},System.String,System.Object[])">
      <summary>Evaluates an assertion over pairs of values taken from two sequence.</summary>
      <typeparam name="TLeftValue">The left value type</typeparam>
      <typeparam name="TRightValue">The right value type</typeparam>
      <param name="leftSequence">The left sequence, or null</param>
      <param name="rightSequence">The right sequence, or null</param>
      <param name="assertion">The assertion to evaluate given a left value and a right value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
    </member>
    <member name="T:MbUnit.Framework.AuthorAttribute">
      <summary>Associates the author's name and email address with a test fixture, test method, test parameter or other test component.</summary>
    </member>
    <member name="P:MbUnit.Framework.AuthorAttribute.AuthorEmail">
      <summary>Gets or sets the author's email address or an empty string if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.AuthorAttribute.AuthorHomepage">
      <summary>Gets or sets the author's homepage or an empty string if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.AuthorAttribute.AuthorName">
      <summary>Gets or sets the author's name.</summary>
    </member>
    <member name="M:MbUnit.Framework.AuthorAttribute.GetMetadata">
      <summary>Gets the metadata key / value pairs to be added to the test component.</summary>
      <returns>The metadata entries</returns>
    </member>
    <member name="T:MbUnit.Framework.BindAttribute">
      <summary>The bind attribute overrides the default binding rules for a test parameter by specifying a different data source, a binding path or an index. At most one such attribute may appear on any given test parameter.</summary>
    </member>
    <member name="P:MbUnit.Framework.BindAttribute.Index">
      <summary>Gets the binding index, or null if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.BindAttribute.Path">
      <summary>Gets the binding path, or null if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.BindAttribute.Source">
      <summary>
        <para> Gets or sets the name of the data source to bind, or null to bind the default data source for the test parameter. </para>
        <para> The default source for a test parameter is the anonymous data source defined within the scope of the test parameter or by its enclosing test. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.BindAttribute.DecorateTestParameter(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ISlotInfo)">
      <summary>
        <para> Applies decorations to a <see cref="T:Gallio.Framework.Pattern.PatternTestParameter" />. </para>
        <para> A typical use of this method is to augment the test parameter with additional metadata or to add additional behaviors to the test parameter. </para>
      </summary>
      <param name="slotScope">The slot scope</param>
      <param name="slot">The slot</param>
    </member>
    <member name="T:MbUnit.Framework.CategoryAttribute">
      <summary>Associates a category name with a test fixture, test method, test parameter or other test component. The category name can be used to classify tests and build test suites of related tests.</summary>
    </member>
    <member name="P:MbUnit.Framework.CategoryAttribute.CategoryName">
      <summary>Gets the category name.</summary>
    </member>
    <member name="M:MbUnit.Framework.CategoryAttribute.GetMetadata">
      <summary>Gets the metadata key / value pairs to be added to the test component.</summary>
      <returns>The metadata entries</returns>
    </member>
    <member name="T:MbUnit.Framework.ColumnAttribute">
      <summary>Provides a column of literal values as a data source.</summary>
    </member>
    <member name="P:MbUnit.Framework.ColumnAttribute.Values">
      <summary>Gets the array of values in the column.</summary>
    </member>
    <member name="M:MbUnit.Framework.ColumnAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.CombinatorialJoinAttribute">
      <summary>Sets the join strategy of a test to be combinatorial.</summary>
    </member>
    <member name="M:MbUnit.Framework.CombinatorialJoinAttribute.GetJoinStrategy">
      <summary>Gets the join strategy to use.</summary>
      <returns>The join strategy</returns>
    </member>
    <member name="T:MbUnit.Framework.ContentAttribute">
      <summary>An abstract base class for data source attributes that obtain contents from a local file, manifest resource, or inline data. At most one location type may be used. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.Contents">
      <summary>Gets or sets the inline data contents as a string.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.FilePath">
      <summary>Gets or sets the path of a local file relative to the current working directory from which the file contents should be read.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.IsDynamic">
      <summary>Returns true if the contents are dynamic, or false if they are static. Static contents can only change if the test assembly is recompiled.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.ResourcePath">
      <summary>
        <para> Gets or sets the path of a manifest resource from which the contents should be read. The path will be resolved within the assembly containing the <see cref="P:MbUnit.Framework.ContentAttribute.ResourceScope" /> type or the test fixture type if none if provided. </para>
        <para> During resolution, a resource name is constructed from the resource path by translating backslashes to periods. If the named resource is found within the scoped assembly manifest, it is used. Otherwise, the name is prepended with the scoped type's namespace and second lookup is attempted. If this final attempt fails, then an error is raised at runtime. </para>
        <para> Examples: <list type="bullet"><item>If the <see cref="P:MbUnit.Framework.ContentAttribute.ResourceScope" nolink="true" /> is <c>MyNamespace.MyType</c> within assembly <c>MyAssembly.dll</c> and if <see cref="P:MbUnit.Framework.ContentAttribute.ResourcePath" /> is <c>"Resources\Image.gif"</c>, then resolution will first check whether <c>Resources.Image.gif</c> in <c>MyAssembly.dll</c> is a valid resource. If not found, it will consider <c>MyNamespace.Resources.Image.gif</c>. If still not found, then a runtime error will be raised.</item><item>If no <see cref="P:MbUnit.Framework.ContentAttribute.ResourceScope" nolink="true" /> is provided, then the containing test fixture type will be used as the resource scope. The above resolution strategy still applies.</item></list></para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.ResourceScope">
      <summary>
        <para> Gets or sets a <see cref="T:System.Type" /> that is used to locate the assembly and namespace within which to resolve a manifest resource in combination with the <see cref="P:MbUnit.Framework.ContentAttribute.ResourcePath" /> property. </para>
        <para> If no value is specified, the test fixture type is used as the resource scope. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.GetDataLocationName">
      <summary>
        <para> Gets the name of the location that is providing the data, or null if none. </para>
        <para> The name will be the filename or resource path if specified, or a special locale-aware string (such as "&lt;inline&gt;") if the contents were specified inline via the <see cref="P:MbUnit.Framework.ContentAttribute.Contents" /> property. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.OpenStream(Gallio.Reflection.ICodeElementInfo)">
      <summary>Opens the contents as a stream.</summary>
      <param name="codeElement">The code element to which the attribute was applied</param>
      <returns>The stream</returns>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.OpenTextReader(Gallio.Reflection.ICodeElementInfo)">
      <summary>Opens the contents as a text reader.</summary>
      <param name="codeElement">The code element to which the attribute was applied</param>
      <returns>The text reader</returns>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.CsvDataAttribute">
      <summary>Provides data from Comma Separated Values contents.</summary>
    </member>
    <member name="P:MbUnit.Framework.CsvDataAttribute.CommentPrefix">
      <summary>
        <para> Gets or sets a character that indicates that a line in the source represents a comment. May be set to '\0' (null) to disable comment handling. </para>
        <para> Comment lines are excluded from the record set. </para>
      </summary>
      <value>The default value is '#' (pound).</value>
    </member>
    <member name="P:MbUnit.Framework.CsvDataAttribute.FieldDelimiter">
      <summary>Gets or sets the field delimiter character.</summary>
      <value>The default value is ',' (comma).</value>
    </member>
    <member name="P:MbUnit.Framework.CsvDataAttribute.HasHeader">
      <summary>Gets or sets whether the CSV document has a header that should be used to provide aliases for indexed columns.</summary>
      <value>The default value is 'false' which indicates that the file does not have a header.</value>
    </member>
    <member name="M:MbUnit.Framework.CsvDataAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.DataAttribute">
      <summary>An abstract base class for MbUnit attributes that contribute values to data sources along with metadata such a description or expected exception type. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.DataAttribute.Description">
      <summary>Gets or sets a description of the values provided by the data source.</summary>
    </member>
    <member name="P:MbUnit.Framework.DataAttribute.ExpectedException">
      <summary>Gets or sets the type of exception that should be thrown when the values provided by the data source are consumed by test.</summary>
    </member>
    <member name="M:MbUnit.Framework.DataAttribute.GetMetadata">
      <summary>Gets the metadata for the data source.</summary>
      <returns>The metadata keys and values</returns>
    </member>
    <member name="T:MbUnit.Framework.DependsOnAssemblyAttribute">
      <summary>Creates a dependency from this test assembly, test fixture or test method on all tests in some other test assembly.</summary>
    </member>
    <member name="P:MbUnit.Framework.DependsOnAssemblyAttribute.TestAssemblyName">
      <summary>Gets the dependent test assembly name.</summary>
    </member>
    <member name="M:MbUnit.Framework.DependsOnAssemblyAttribute.GetDependency(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Gets the code element that declares the tests on which this test should depend.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
      <returns>The code element representing the dependency</returns>
    </member>
    <member name="T:MbUnit.Framework.DependsOnAttribute">
      <summary>Creates a dependency from this test assembly, test fixture or test method on some other test fixture or test method.</summary>
    </member>
    <member name="P:MbUnit.Framework.DependsOnAttribute.TestFixtureType">
      <summary>Gets the dependent test fixture type, or null if the dependency is on another test method of this test fixture.</summary>
    </member>
    <member name="P:MbUnit.Framework.DependsOnAttribute.TestMethodName">
      <summary>Gets the dependent test method name, or null if the dependency is on the whole test fixture.</summary>
    </member>
    <member name="M:MbUnit.Framework.DependsOnAttribute.GetDependency(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Gets the code element that declares the tests on which this test should depend.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
      <returns>The code element representing the dependency</returns>
    </member>
    <member name="T:MbUnit.Framework.DescriptionAttribute">
      <summary>Associates a description with a test fixture, test method, test parameter or other test component.</summary>
    </member>
    <member name="P:MbUnit.Framework.DescriptionAttribute.Description">
      <summary>Gets or sets the description.</summary>
    </member>
    <member name="M:MbUnit.Framework.DescriptionAttribute.GetMetadata">
      <summary>Gets the metadata key / value pairs to be added to the test component.</summary>
      <returns>The metadata entries</returns>
    </member>
    <member name="T:MbUnit.Framework.DynamicTestFactoryAttribute">
      <summary>Specifies a method that is used to generate tests dynamically at runtime.</summary>
    </member>
    <member name="M:MbUnit.Framework.DynamicTestFactoryAttribute.Execute(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Executes the test method.</summary>
      <param name="state">The test instance state, not null</param>
      <returns>The test method result</returns>
    </member>
    <member name="T:MbUnit.Framework.ExpectedArgumentExceptionAttribute">
      <summary>Declares that the associated test is expected to throw an <see cref="T:System.ArgumentException" />.</summary>
    </member>
    <member name="T:MbUnit.Framework.ExpectedArgumentNullExceptionAttribute">
      <summary>Declares that the associated test is expected to throw an <see cref="T:System.ArgumentNullException" />.</summary>
    </member>
    <member name="T:MbUnit.Framework.ExpectedArgumentOutOfRangeExceptionAttribute">
      <summary>Declares that the associated test is expected to throw an <see cref="T:System.ArgumentOutOfRangeException" />.</summary>
    </member>
    <member name="T:MbUnit.Framework.ExpectedExceptionAttribute">
      <summary>Declares that the associated test is expected to throw an exception of a particular type.</summary>
    </member>
    <member name="P:MbUnit.Framework.ExpectedExceptionAttribute.ExceptionType">
      <summary>Gets the expected exception type.</summary>
    </member>
    <member name="P:MbUnit.Framework.ExpectedExceptionAttribute.Message">
      <summary>Gets or sets the expected exception message, or null if none specified.</summary>
    </member>
    <member name="M:MbUnit.Framework.ExpectedExceptionAttribute.DecorateMethodTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.IMethodInfo)">
      <summary>
        <para> Applies decorations to a method-level test. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="methodScope">The method scope</param>
      <param name="method">The method</param>
    </member>
    <member name="T:MbUnit.Framework.ExplicitAttribute">
      <summary>Indicates that a test should only be run explicitly. The test will still appear in the test tree but it will not run and it will not appear in the test results unless it is explicitly selected for execution.</summary>
    </member>
    <member name="P:MbUnit.Framework.ExplicitAttribute.Reason">
      <summary>Gets the reason that the test should only run explicitly.</summary>
    </member>
    <member name="M:MbUnit.Framework.ExplicitAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a test. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.FactoryAttribute">
      <summary>Specifies a factory member that will provide values for a data-driven test.</summary>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.ColumnCount">
      <summary>Gets or sets the number of columns produced by the factory, or 0 if unknown. Defaults to 0.</summary>
      <value>The number of columns</value>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is less than zero</exception>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.Kind">
      <summary>Gets or sets the kind of the factory. Defaults to <see cref="F:Gallio.Framework.Data.FactoryKind.Auto" />.</summary>
      <value>The kind of the factory.</value>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.MemberName">
      <summary>Gets the factory member name, never null.</summary>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.Type">
      <summary>Gets the declaring type of the factory, or null if it is assumed to be the fixture class.</summary>
    </member>
    <member name="M:MbUnit.Framework.FactoryAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.FixtureInitializerAttribute">
      <summary>Specifies a method that is to be invoked after a fixture instance has been created to complete its initialization before test fixture setup runs.</summary>
    </member>
    <member name="M:MbUnit.Framework.FixtureInitializerAttribute.DecorateContainingScope(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.IMethodInfo)">
      <summary>Applies decorations to the containing test.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="method">The method to process</param>
    </member>
    <member name="M:MbUnit.Framework.FixtureInitializerAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.IMethodInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="method">The method</param>
    </member>
    <member name="T:MbUnit.Framework.FixtureSetUpAttribute">
      <summary>Specifies a method that is to be invoked to set up the state of a fixture before any of its tests are executed.</summary>
    </member>
    <member name="M:MbUnit.Framework.FixtureSetUpAttribute.DecorateContainingScope(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.IMethodInfo)">
      <summary>Applies decorations to the containing test.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="method">The method to process</param>
    </member>
    <member name="M:MbUnit.Framework.FixtureSetUpAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.IMethodInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="method">The method</param>
    </member>
    <member name="T:MbUnit.Framework.FixtureTearDownAttribute">
      <summary>Specifies a method that is to be invoked to tear down the state of a fixture after all of its tests have been executed.</summary>
    </member>
    <member name="M:MbUnit.Framework.FixtureTearDownAttribute.DecorateContainingScope(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.IMethodInfo)">
      <summary>Applies decorations to the containing test.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="method">The method to process</param>
    </member>
    <member name="M:MbUnit.Framework.FixtureTearDownAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.IMethodInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="method">The method</param>
    </member>
    <member name="T:MbUnit.Framework.HeaderAttribute">
      <summary>Defines names as aliases for the columns in an indexed data source such as those that have been populated by <see cref="T:MbUnit.Framework.RowAttribute" /> or <see cref="T:MbUnit.Framework.ColumnAttribute" />. The names may subsequently be used in data binding expressions in place of their corresponding column indices.</summary>
    </member>
    <member name="P:MbUnit.Framework.HeaderAttribute.ColumnNames">
      <summary>Gets the array of column names.</summary>
    </member>
    <member name="M:MbUnit.Framework.HeaderAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.IgnoreAttribute">
      <summary>Indicates that a test is to be ignored by the framework and will not be run. The test will still appear in test reports along with the reason that it was ignored, if provided.</summary>
    </member>
    <member name="P:MbUnit.Framework.IgnoreAttribute.Reason">
      <summary>Gets the reason that the test has been ignored, or an empty string if none.</summary>
    </member>
    <member name="M:MbUnit.Framework.IgnoreAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a test. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.ImportanceAttribute">
      <summary>Associates a <see cref="T:MbUnit.Framework.Importance" /> with a test fixture, test method, test parameter or other test component.</summary>
    </member>
    <member name="P:MbUnit.Framework.ImportanceAttribute.Importance">
      <summary>Gets or sets the importance.</summary>
    </member>
    <member name="M:MbUnit.Framework.ImportanceAttribute.GetMetadata">
      <summary>Gets the metadata key / value pairs to be added to the test component.</summary>
      <returns>The metadata entries</returns>
    </member>
    <member name="T:MbUnit.Framework.JoinAttribute">
      <summary>An abstract class for attributes that specify the join strategy of a test. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.JoinAttribute.GetJoinStrategy">
      <summary>Gets the join strategy to use.</summary>
      <returns>The join strategy</returns>
    </member>
    <member name="M:MbUnit.Framework.JoinAttribute.Process(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Processes a code element and applies its contributions to the scope of this pattern. The scope will typically have been introduced by the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)" /> method of a primary pattern applied to this code element. </para>
        <para> This method is used by patterns to decorate tests and test parameters that have been declared by primary patterns. </para>
        <para> For example, the <see cref="M:Gallio.Framework.Pattern.IPattern.Process(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)" /> method will typically be called by another pattern that has just created a new test based on the associated code element, such as a test method. The method then has the opportunity to modify the test to add metadata, change its name, add new behaviors, and so on. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element to process</param>
    </member>
    <member name="M:MbUnit.Framework.JoinAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly</exception>
    </member>
    <member name="T:MbUnit.Framework.LinkMixinAttribute">
      <summary>Links a "mixin" into a test fixture by way of a field or property. The linked mixin participates in the lifecycle of the fixture and can provide tests, setup/teardown methods, and other contributions.</summary>
    </member>
    <member name="P:MbUnit.Framework.LinkMixinAttribute.IsPrimary">
      <summary>
        <para> Returns true if this is a primary pattern. </para>
        <para> A primary pattern is a pattern that defines the ultimate purpose of a code element and the nature of the tests or test parameters that are produced from it. Consequently the primary pattern is the only one on which the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)" /> method will be called. </para>
        <para> Each code element may have at most one primary pattern. It is an error for a code element to have more than one associated primary pattern. </para>
        <para> If a code element does not have an associated primary pattern, its containing test may choose to apply default processing to it instead. For example, the containing test may give an opportunity to patterns associated with the code element to consume a test method parameter but will revert to default behavior if no primary patterns explicitly claim it. </para>
        <para> Non-primary patterns still play a very important part in the construction of the test model. Non-primary patterns may implement the <see cref="M:Gallio.Framework.Pattern.IPattern.Process(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)" /> method to decorate tests and test parameters declared by the primary pattern. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.LinkMixinAttribute.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)">
      <summary>
        <para> Consumes a code element and applies its contributions to the scope provided by a containing pattern. </para>
        <para> This method is used to declare new tests, test parameters and other components and add them to a containing test that was defined in some other scope. </para>
        <para> For example, when enumerating test fixtures, the assembly-level pattern will call the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)" /> method of the primary patterns associated with each type in an assembly. Some of these patterns will create new test fixture objects and add them as children of the containing assembly-level test. They will then call the <see cref="M:Gallio.Framework.Pattern.IPattern.Process(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)" /> method of each non-primary pattern associated with the type within the scope of the test fixture. Then they will typically recurse into the fixture to apply contributions defined by patterns associated with methods, fields, properties, events, constructors and generic type parameters. </para>
      </summary>
      <param name="containingScope">The containing scope</param>
      <param name="codeElement">The code element to process</param>
      <param name="skipChildren">If true, skips generating child test components. Instead the children may be populated on demand using <see cref="M:Gallio.Framework.Pattern.IPatternScope.AddDeferredComponentPopulator(Gallio.Framework.Pattern.DeferredComponentPopulator)" />. The implementation may safely ignore the value of this flag so long as subsequent attempts to populate children on demand are idempotent (do nothing or have no adverse side-effects).</param>
    </member>
    <member name="T:MbUnit.Framework.MetadataAttribute">
      <summary>Associates custom metadata with a test fixture, test method, test parameter or other test component. The metadata can be used for documentation, classification or dynamic customization of tests.</summary>
    </member>
    <member name="P:MbUnit.Framework.MetadataAttribute.MetadataKey">
      <summary>Gets the metadata key.</summary>
    </member>
    <member name="P:MbUnit.Framework.MetadataAttribute.MetadataValue">
      <summary>Gets the metadata value.</summary>
    </member>
    <member name="M:MbUnit.Framework.MetadataAttribute.GetMetadata">
      <summary>Gets the metadata key / value pairs to be added to the test component.</summary>
      <returns>The metadata entries</returns>
    </member>
    <member name="T:MbUnit.Framework.MixinAttribute">
      <summary>Declares a mixin which can be linked into another test fixture or mixin to incorporate additional functionality.</summary>
    </member>
    <member name="P:MbUnit.Framework.MixinAttribute.IsPrimary">
      <summary>
        <para> Returns true if this is a primary pattern. </para>
        <para> A primary pattern is a pattern that defines the ultimate purpose of a code element and the nature of the tests or test parameters that are produced from it. Consequently the primary pattern is the only one on which the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)" /> method will be called. </para>
        <para> Each code element may have at most one primary pattern. It is an error for a code element to have more than one associated primary pattern. </para>
        <para> If a code element does not have an associated primary pattern, its containing test may choose to apply default processing to it instead. For example, the containing test may give an opportunity to patterns associated with the code element to consume a test method parameter but will revert to default behavior if no primary patterns explicitly claim it. </para>
        <para> Non-primary patterns still play a very important part in the construction of the test model. Non-primary patterns may implement the <see cref="M:Gallio.Framework.Pattern.IPattern.Process(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)" /> method to decorate tests and test parameters declared by the primary pattern. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.MixinAttribute.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)">
      <summary>
        <para> Consumes a code element and applies its contributions to the scope provided by a containing pattern. </para>
        <para> This method is used to declare new tests, test parameters and other components and add them to a containing test that was defined in some other scope. </para>
        <para> For example, when enumerating test fixtures, the assembly-level pattern will call the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)" /> method of the primary patterns associated with each type in an assembly. Some of these patterns will create new test fixture objects and add them as children of the containing assembly-level test. They will then call the <see cref="M:Gallio.Framework.Pattern.IPattern.Process(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)" /> method of each non-primary pattern associated with the type within the scope of the test fixture. Then they will typically recurse into the fixture to apply contributions defined by patterns associated with methods, fields, properties, events, constructors and generic type parameters. </para>
      </summary>
      <param name="containingScope">The containing scope</param>
      <param name="codeElement">The code element to process</param>
      <param name="skipChildren">If true, skips generating child test components. Instead the children may be populated on demand using <see cref="M:Gallio.Framework.Pattern.IPatternScope.AddDeferredComponentPopulator(Gallio.Framework.Pattern.DeferredComponentPopulator)" />. The implementation may safely ignore the value of this flag so long as subsequent attempts to populate children on demand are idempotent (do nothing or have no adverse side-effects).</param>
    </member>
    <member name="T:MbUnit.Framework.MultipleAssertsAttribute">
      <summary>Runs the test as if it were surrounded by <see cref="M:MbUnit.Framework.Assert.Multiple(Gallio.Action)" /> so that multiple assertion failures within the test are tolerated.</summary>
    </member>
    <member name="M:MbUnit.Framework.MultipleAssertsAttribute.DecorateMethodTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.IMethodInfo)">
      <summary>
        <para> Applies decorations to a method-level test. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="methodScope">The method scope</param>
      <param name="method">The method</param>
    </member>
    <member name="T:MbUnit.Framework.NameAttribute">
      <summary>Overrides the name of a test or test parameter.</summary>
    </member>
    <member name="P:MbUnit.Framework.NameAttribute.Name">
      <summary>Gets the overridden name.</summary>
    </member>
    <member name="M:MbUnit.Framework.NameAttribute.Process(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Processes a code element and applies its contributions to the scope of this pattern. The scope will typically have been introduced by the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)" /> method of a primary pattern applied to this code element. </para>
        <para> This method is used by patterns to decorate tests and test parameters that have been declared by primary patterns. </para>
        <para> For example, the <see cref="M:Gallio.Framework.Pattern.IPattern.Process(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)" /> method will typically be called by another pattern that has just created a new test based on the associated code element, such as a test method. The method then has the opportunity to modify the test to add metadata, change its name, add new behaviors, and so on. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element to process</param>
    </member>
    <member name="M:MbUnit.Framework.NameAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly</exception>
    </member>
    <member name="T:MbUnit.Framework.PairwiseJoinAttribute">
      <summary>Sets the join strategy of a test to be pairwise.</summary>
    </member>
    <member name="M:MbUnit.Framework.PairwiseJoinAttribute.GetJoinStrategy">
      <summary>Gets the join strategy to use.</summary>
      <returns>The join strategy</returns>
    </member>
    <member name="T:MbUnit.Framework.ParallelizableAttribute">
      <summary>Specifies that a test can be run in parallel with other parallelizable tests.</summary>
    </member>
    <member name="M:MbUnit.Framework.ParallelizableAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a test. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.ParameterAttribute">
      <summary>Declares that a property, field, method parameter, constructor parameter, generic type parameter or generic method parameter represents a test parameter.</summary>
    </member>
    <member name="T:MbUnit.Framework.PendingAttribute">
      <summary>Indicates that a test has pending prerequisites so it will not be run. The test will still appear in test reports along with an explanation of the reason it it pending, if provided.</summary>
    </member>
    <member name="P:MbUnit.Framework.PendingAttribute.Reason">
      <summary>Gets the reason that the test is pending.</summary>
    </member>
    <member name="M:MbUnit.Framework.PendingAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a test. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.RepeatAttribute">
      <summary>Decorates a test method and causes it to be invoked repeatedly.</summary>
    </member>
    <member name="M:MbUnit.Framework.RepeatAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a test. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.RollbackAttribute">
      <summary>Decorates a test method whose database operation must be executed within a transaction and rolled back when it has finished executing.</summary>
    </member>
    <member name="P:MbUnit.Framework.RollbackAttribute.IncludeSetUpAndTearDown">
      <summary>
        <para> When set to true, includes setup and teardown in the rollback. Otherwise only transactions performed during the test itself are affected. </para>
        <para> The fixture setup and teardown is not included regardless unless this attribute is applied to the fixture class itself instead of the test method. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.RollbackAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a test. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.RowAttribute">
      <summary>Provides a row of literal values as a data source.</summary>
    </member>
    <member name="P:MbUnit.Framework.RowAttribute.Values">
      <summary>Gets the array of values in the row.</summary>
    </member>
    <member name="M:MbUnit.Framework.RowAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.SequentialJoinAttribute">
      <summary>Sets the join strategy of a test to be sequential.</summary>
    </member>
    <member name="M:MbUnit.Framework.SequentialJoinAttribute.GetJoinStrategy">
      <summary>Gets the join strategy to use.</summary>
      <returns>The join strategy</returns>
    </member>
    <member name="T:MbUnit.Framework.SetUpAttribute">
      <summary>Specifies a method that is to be invoked before each test in a fixture executes to set up the state of the test. The method will run once for each test. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.StaticTestFactoryAttribute">
      <summary>Specifies a method that is used to generate tests statically at test exploration time.</summary>
    </member>
    <member name="M:MbUnit.Framework.StaticTestFactoryAttribute.DecorateContainingScope(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.IMethodInfo)">
      <summary>Applies decorations to the containing test.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="method">The method to process</param>
    </member>
    <member name="M:MbUnit.Framework.StaticTestFactoryAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.IMethodInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="method">The method</param>
    </member>
    <member name="T:MbUnit.Framework.TearDownAttribute">
      <summary>Specifies a method that is to be invoked after each test in a fixture executes to tear down the state of the test. The method will run once for each test. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.Test">
      <summary>Describes a test generated either at test exploration time or at test execution time by a test factory. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.Test.BuildStaticTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Builds a static test during test exploration.</summary>
      <param name="containingScope">The containing pattern evaluation scope</param>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined</param>
    </member>
    <member name="M:MbUnit.Framework.Test.BuildStaticTests(System.Collections.Generic.IEnumerable{MbUnit.Framework.Test},Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Builds a collection of static tests during test exploration.</summary>
      <param name="tests">The enumeration of tests to build as children of the containing scope</param>
      <param name="containingScope">The containing pattern evaluation scope</param>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="containingScope" />, <paramref name="declaringCodeElement" /> or <paramref name="tests" /> is null or contains a null</exception>
    </member>
    <member name="M:MbUnit.Framework.Test.RunDynamicTest(Gallio.Reflection.ICodeElementInfo,Gallio.Action,Gallio.Action)">
      <summary>Runs a dynamic test during test execution.</summary>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined</param>
      <param name="setUp">Optional set-up code to run before the test, or null if none</param>
      <param name="tearDown">Optional tear-down code to run after the test, or null if none</param>
    </member>
    <member name="M:MbUnit.Framework.Test.RunDynamicTests(System.Collections.Generic.IEnumerable{MbUnit.Framework.Test},Gallio.Reflection.ICodeElementInfo,Gallio.Action,Gallio.Action)">
      <summary>Runs a collection of dynamic tests during test execution.</summary>
      <param name="tests">The enumeration of tests to run</param>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined</param>
      <param name="setUp">Optional set-up code to run before the test, or null if none</param>
      <param name="tearDown">Optional tear-down code to run after the test, or null if none</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="declaringCodeElement" /> or <paramref name="tests" /> is null or contains a null</exception>
    </member>
    <member name="T:MbUnit.Framework.TestAttribute">
      <summary>Specifies that a method represents a single test case within a fixture.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestAttribute.Execute(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Executes the test method.</summary>
      <param name="state">The test instance state, not null</param>
      <returns>The test method result</returns>
    </member>
    <member name="T:MbUnit.Framework.TestCase">
      <summary>Describes a test case generated either at test exploration time or at test execution time by a test factory.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestCase.Execute">
      <summary>Gets the delegate to run as the main body of the test case.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestCase.IsTestCase">
      <summary>Returns true if the test represents an individual test case.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestCase.Kind">
      <summary>Gets the test kind.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestCase.OnExecuteSelf">
      <summary>Executes the main body of the test, excluding its children (which will run afterwards).</summary>
    </member>
    <member name="T:MbUnit.Framework.TestDecoratorAttribute">
      <summary>An abstract base class for implementing new test decorator behaviors. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a test. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.Dispose(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Disposes the test.</summary>
      <param name="testInstanceState">The test instance state, not null</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.Execute(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Executes the test.</summary>
      <param name="testInstanceState">The test instance state, not null</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.Initialize(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Initializes the test.</summary>
      <param name="testInstanceState">The test instance state, not null</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.SetUp(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Sets up the test.</summary>
      <param name="testInstanceState">The test instance state, not null</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.TearDown(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Tears down the test.</summary>
      <param name="testInstanceState">The test instance state, not null</param>
    </member>
    <member name="T:MbUnit.Framework.TestDefinition">
      <summary>Abstract class for custom test definitions such as generated test cases and test suites. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestDefinition.CodeElement">
      <summary>Gets or sets the code element associated with the test, or null if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestDefinition.Description">
      <summary>Gets or sets the description metadata of the test, or null if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestDefinition.IsTestCase">
      <summary>Returns true if the test represents an individual test case.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestDefinition.Kind">
      <summary>Gets the test kind.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestDefinition.Metadata">
      <summary>Gets a mutable table of metadata entries associated with the test.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestDefinition.Name">
      <summary>Gets the test name.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestDefinition.Timeout">
      <summary>Gets or sets the maximum amount of time the whole test including its setup, teardown and body should be permitted to run. If the test runs any longer than this, it will be aborted by the framework. The timeout may be null to indicate the absence of a timeout.</summary>
      <value>The timeout. Default value is null.</value>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> represents a negative time span</exception>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.BuildStaticTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Builds a static test during test exploration.</summary>
      <param name="containingScope">The containing pattern evaluation scope</param>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined</param>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.GetChildren">
      <summary>Gets the children of this test.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.OnExecuteSelf">
      <summary>Executes the main body of the test, excluding its children (which will run afterwards).</summary>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.OnSetupChild">
      <summary>Runs set-up code before each child.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.OnSetupSelf">
      <summary>Runs set-up code before execute and before all children.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.OnTearDownChild">
      <summary>Runs tear-down code after each child.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.OnTearDownSelf">
      <summary>Runs tear-down code after execute and after all children.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.RunDynamicTest(Gallio.Reflection.ICodeElementInfo,Gallio.Action,Gallio.Action)">
      <summary>Runs a dynamic test during test execution.</summary>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined</param>
      <param name="setUp">Optional set-up code to run before the test, or null if none</param>
      <param name="tearDown">Optional tear-down code to run after the test, or null if none</param>
    </member>
    <member name="T:MbUnit.Framework.TestFixtureAttribute">
      <summary>Specifies that a class represents a test fixture. This attribute is optional.</summary>
    </member>
    <member name="T:MbUnit.Framework.TestFixtureReference">
      <summary>Describes a reference to another test fixture. This is used to enable test suites to include tests that are defined using attributes.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestFixtureReference.TestFixtureType">
      <summary>Gets the referenced test fixture type, or null if the reference is on a test method of the containing test fixture.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestFixtureReference.BuildStaticTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Builds a static test during test exploration.</summary>
      <param name="containingScope">The containing pattern evaluation scope</param>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined</param>
    </member>
    <member name="M:MbUnit.Framework.TestFixtureReference.RunDynamicTest(Gallio.Reflection.ICodeElementInfo,Gallio.Action,Gallio.Action)">
      <summary>Runs a dynamic test during test execution.</summary>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined</param>
      <param name="setUp">Optional set-up code to run before the test, or null if none</param>
      <param name="tearDown">Optional tear-down code to run after the test, or null if none</param>
    </member>
    <member name="T:MbUnit.Framework.TestsOnAttribute">
      <summary>Associates the name of the type under test with a test fixture, test method, test parameter or other test component.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestsOnAttribute.TypeName">
      <summary>Gets the full name or assembly qualified name of the type under test.</summary>
      <value>The name of the type under test as obtained by <see cref="P:System.Type.FullName" /> or <see cref="P:System.Type.AssemblyQualifiedName" />.</value>
    </member>
    <member name="M:MbUnit.Framework.TestsOnAttribute.GetMetadata">
      <summary>Gets the metadata key / value pairs to be added to the test component.</summary>
      <returns>The metadata entries</returns>
    </member>
    <member name="T:MbUnit.Framework.TestSuite">
      <summary>Describes a test suite generated either at test exploration time or at test execution time by a test factory.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.Children">
      <summary>Gets a mutable list of the children of this test.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.IsTestCase">
      <summary>Returns true if the test represents an individual test case.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.Kind">
      <summary>Gets the test kind.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.SetUp">
      <summary>Gets or sets a delegate to run before each test case in the suite, or null if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.SuiteSetUp">
      <summary>Gets or sets a delegate to run before all test cases in the suite, or null if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.SuiteTearDown">
      <summary>Gets or sets a delegate to run after all test cases in the suite, or null if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.TearDown">
      <summary>Gets or sets a delegate to run after each test case in the suite, or null if none.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestSuite.GetChildren">
      <summary>Gets the children of this test.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestSuite.OnSetupChild">
      <summary>Runs set-up code before each child.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestSuite.OnSetupSelf">
      <summary>Runs set-up code before execute and before all children.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestSuite.OnTearDownChild">
      <summary>Runs tear-down code after each child.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestSuite.OnTearDownSelf">
      <summary>Runs tear-down code after execute and after all children.</summary>
    </member>
    <member name="T:MbUnit.Framework.ThreadedRepeatAttribute">
      <summary>Decorates a test method and causes it to be invoked repeatedly on multiple concurrent threads.</summary>
    </member>
    <member name="M:MbUnit.Framework.ThreadedRepeatAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a test. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.TimeoutAttribute">
      <summary>Sets the maximum amount of time that a test or fixture is permitted to run.</summary>
    </member>
    <member name="P:MbUnit.Framework.TimeoutAttribute.TimeoutSeconds">
      <summary>Gets the timeout in seconds.</summary>
    </member>
    <member name="M:MbUnit.Framework.TimeoutAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a test. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.XmlDataAttribute">
      <summary>Provides data from XML contents.</summary>
    </member>
    <member name="M:MbUnit.Framework.XmlDataAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.Importance">
      <summary>Specifies the test's relative importance which can be used for classifying tests to be executed.</summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Critical">
      <summary>Critical importance.</summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Severe">
      <summary>Severe importance. Less important than <see cref="F:MbUnit.Framework.Importance.Critical" />.</summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Serious">
      <summary>Serious importance. Less important than <see cref="F:MbUnit.Framework.Importance.Severe" />.</summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Default">
      <summary>Default importance.</summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.NoOneReallyCaresAbout">
      <summary>Not important.</summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.AbstractContract">
      <summary>Abstract base class for contracts. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.AbstractContract.AssertMethodExists(System.Reflection.MethodInfo,System.String)">
      <summary>Verifies that the specified method info object is not null, indicating that the method exists, otherwise raises an assertion failure and describes the expected method signature.</summary>
      <param name="method">The method, or null if missing</param>
      <param name="methodSignature">The expected method signature for diagnostic output</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.AbstractContract.GetContractVerificationTests">
      <summary>Gets an enumeration of test cases whose purpose is to verify the contract.</summary>
      <returns>An enumeration of tests</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.AbstractContract.GetInterface(System.Type,System.Type)">
      <summary>Gets the interface of a particular type if it is implemented by another type, otherwise returns null.</summary>
      <param name="implementationType">The implementation type</param>
      <param name="interfaceType">The interface type</param>
      <returns>The interface type or null if it is not implemented by the implementation type</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.ComparisonContract`1">
      <summary>
        <para> Contract for verifying the implementation of the generic <see cref="T:System.IComparable`1" /> interface. </para>
        <para> Built-in verifications: <list type="bullet"><item><term>ComparableCompareTo</term><description>The type implements the method <see cref="M:System.IComparable`1.CompareTo(`0)" />. The method behaves as expected agains the provided equivalence classes.</description></item><item><term>OperatorGreaterThan</term><description>The type has a static "Greater Than" operator overload which behaves correctly against the provided equivalence classes. Disable that test by setting the <see cref="P:MbUnit.Framework.ContractVerifiers.ComparisonContract`1.ImplementsOperatorOverloads" /> property to <c>false</c>.</description></item><item><term>OperatorGreaterThanOrEqual</term><description>The type has a static "Greater Than Or Equal" operator overload which behaves correctly against the provided equivalence classes. Disable that test by setting the <see cref="P:MbUnit.Framework.ContractVerifiers.ComparisonContract`1.ImplementsOperatorOverloads" nolink="true" /> property to <c>false</c>.</description></item><item><term>OperatorLessThan</term><description>The type has a static "Less Than" operator overload which behaves correctly against the provided equivalence classes. Disable that test by setting the <see cref="P:MbUnit.Framework.ContractVerifiers.ComparisonContract`1.ImplementsOperatorOverloads" nolink="true" /> property to <c>false</c>.</description></item><item><term>OperatorLessThanOrEqual</term><description>The type has a static "Less Than Or Equal" operator overload which behaves correctly against the provided equivalence classes. Disable that test by setting the <see cref="P:MbUnit.Framework.ContractVerifiers.ComparisonContract`1.ImplementsOperatorOverloads" nolink="true" /> property to <c>false</c>.</description></item></list></para>
        <example> The following example shows a simple class implementing the <see cref="T:System.IComparable`1" nolink="true" /> interface, and a test fixture which uses the comparison contract to test it. <code>
            public class SampleComparable : IComparable&lt;SampleComparable&gt;
            {
                private int value;
            
                public SampleComparable(int value)
                {
                    this.value = value;
                }
            
                public int CompareTo(SampleComparable other)
                {
                    return Object.ReferenceEquals(other, null) 
                        ? Int32.MaxValue 
                        : value.CompareTo(other.value);
                }
            
                public static bool operator &gt;=(SampleComparable left, SampleComparable right)
                {
                    return (Object.ReferenceEquals(left, null) 
                        &amp;&amp; Object.ReferenceEquals(right, null)) 
                        || (!Object.ReferenceEquals(left, null) 
                        &amp;&amp; (left.CompareTo(right) &gt;= 0));
                }
            
                public static bool operator &lt;=(SampleComparable left, SampleComparable right)
                {
                    return Object.ReferenceEquals(left, null) 
                        || (left.CompareTo(right) &lt;= 0);
                }
            
                public static bool operator &gt;(SampleComparable left, SampleComparable right)
                {
                    return !Object.ReferenceEquals(left, null) 
                        &amp;&amp; (left.CompareTo(right) &gt; 0);
                }
            
                public static bool operator &lt;(SampleComparable left, SampleComparable right)
                {
                    return (!Object.ReferenceEquals(left, null) 
                        || !Object.ReferenceEquals(right, null)) 
                        &amp;&amp; (Object.ReferenceEquals(left, null) 
                        || (left.CompareTo(right) &lt; 0));
                }
            
            public class SampleComparableTest
            {
                [VerifyContract]
                public readonly IContract EqualityTests = new ComparisonContract&lt;SampleComparable&gt;
                {
                    ImplementsOperatorOverloads = true, // Optional (default is true)
                    EquivalenceClasses =
                    {
                        { new SampleComparable(1) },
                        { new SampleComparable(2) },
                        { new SampleComparable(3) },
                        { new SampleComparable(4) },
                        { new SampleComparable(5) }
                    }
                };
            }
            </code></example>
      </summary>
      <typeparam name="TTarget" />
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.ComparisonContract`1.EquivalenceClasses">
      <summary>Gets or sets the collection of equivalence classes of instances to feed the contract verifier.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.ComparisonContract`1.ImplementsOperatorOverloads">
      <summary>Determines whether the verifier will evaluate the presence and the behavior of the four operator overloads "Greater Than", "Greater Than Or Equal", "Less Than", and "Less Than Or Equal". The default value is 'true'.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ComparisonContract`1.GetContractVerificationTests">
      <summary>Gets an enumeration of test cases whose purpose is to verify the contract.</summary>
      <returns>An enumeration of tests</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.EqualityContract`1">
      <summary>
        <para> Contract for verifying the implementation of the generic <see cref="T:System.IEquatable`1" /> interface. </para>
        <para> Built-in verifications: <list type="bullet"><item><term>ObjectEquals</term><description>The <see cref="M:System.Object.Equals(System.Object)" /> method was overriden and behaves correctly against the provided equivalence classes.</description></item><item><term>ObjectGetHashCode</term><description>The <see cref="M:System.Object.GetHashCode" /> method was overriden and behaves correctly against the provided equivalence classes.</description></item><item><term>EquatableEquals</term><description>The <see cref="M:System.IEquatable`1.Equals(`0)" /> method is implemented and behaves as expected agains the provided equivalence classes.</description></item><item><term>OperatorEquals</term><description>The type has a static equality operator (==) overload which behaves correctly against the provided equivalence classes. Disable that test by setting the <see cref="P:MbUnit.Framework.ContractVerifiers.EqualityContract`1.ImplementsOperatorOverloads" /> property to <code>false</code>.</description></item><item><term>OperatorNotEquals</term><description>The type has a static inequality operator (!=) overload which behaves correctly against the provided equivalence classes. Disable that test by setting the <see cref="P:MbUnit.Framework.ContractVerifiers.EqualityContract`1.ImplementsOperatorOverloads" nolink="true" /> property to <code>false</code>. </description></item></list></para>
        <example> The following example shows a simple class implementing the <see cref="T:System.IEquatable`1" nolink="true" /> interface, and a test fixture which uses the equality contract to test it. <code>
            public class SampleEquatable : IEquatable&lt;SampleEquatable&gt;
            {
                private int value;
            
                public SampleEquatable(int value)
                {
                    this.value = value;
                }
            
                public override int GetHashCode()
                {
                    return value.GetHashCode();
                }
            
                public override bool Equals(object obj)
                {
                    return Equals(obj as SampleEquatable);
                }
            
                public bool Equals(SampleEquatable other)
                {
                    return !Object.ReferenceEquals(other, null) 
                        &amp;&amp; (value == other.value);
                }
            
                public static bool operator ==(SampleEquatable left, SampleEquatable right)
                {
                    return (Object.ReferenceEquals(left, null)
                        &amp;&amp; Object.ReferenceEquals(right, null))
                        || (!Object.ReferenceEquals(left, null) 
                        &amp;&amp; left.Equals(right));
                }
                
                public static bool operator !=(SampleEquatable left, SampleEquatable right)
                {
                    return !(left == right);
                }
            }
            
            public class SampleEquatableTest
            {
                [VerifyContract]
                public readonly IContract EqualityTests = new EqualityContract&lt;SampleEquatable&gt;
                {
                    ImplementsOperatorOverloads = true, // Optional (default is true)
                    EquivalenceClasses =
                    {
                        { new SampleEquatable(1) },
                        { new SampleEquatable(2) },
                        { new SampleEquatable(3) },
                        { new SampleEquatable(4) },
                        { new SampleEquatable(5) }
                    }
                };
            }
            </code></example>
      </summary>
      <typeparam name="TTarget">The target tested type which implements the generic <see cref="T:System.IEquatable`1" /> interface.</typeparam>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.EqualityContract`1.EquivalenceClasses">
      <summary>Gets or sets the collection of equivalence classes of instances to feed the contract verifier.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.EqualityContract`1.ImplementsOperatorOverloads">
      <summary>
        <para> Determines whether the verifier will evaluate the presence and the behavior of the equality and the inequality operator overloads. The default value is <code>true</code>. </para>
        <para> Built-in verifications: <list type="bullet"><item>The type has a static equality operator (==) overload which behaves correctly against the provided equivalence classes.</item><item>The type has a static inequality operator (!=) overload which behaves correctly against the provided equivalence classes.</item><item /></list></para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EqualityContract`1.GetContractVerificationTests">
      <summary>Gets an enumeration of test cases whose purpose is to verify the contract.</summary>
      <returns>An enumeration of tests</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.EquivalenceClass`1">
      <summary>
        <para> Contains a collection of equivalent object instances. All the elements of the collection should be equal together, in the sense of the local implementation of an equality contract (<see cref="T:System.IEquatable`1" />) or a comparison contract (<see cref="T:System.IComparable`1" />). </para>
        <para> Equivalent classes are used by some contract verifiers such as <see cref="T:MbUnit.Framework.ContractVerifiers.EqualityContract`1" /> to check for the correct implementation of object equality or comparison. </para>
      </summary>
      <typeparam name="T">The type of equivalent object instances.</typeparam>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.EquivalenceClass`1.EquivalentInstances">
      <summary>Gets the collection of equivalent instances.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EquivalenceClass`1.GetEnumerator">
      <summary>Returns a strongly-typed enumerator that iterates through the collection.</summary>
      <returns>A strongly-typed enumerator</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.EquivalenceClassCollection`1">
      <summary>
        <para> A collection of equivalence classes. </para>
        <para> Equivalent classes are used by some contract verifiers such as <see cref="T:MbUnit.Framework.ContractVerifiers.EqualityContract`1" /> to check for the correct implementation of object equality or comparison. </para>
        <para> Use the default constructor followed by a list initializer to create a collection of equivalence classes which contains a variable number of object instances. <example><code>
            var collection = new EquivalenceClassCollection&lt;Foo&gt;
            {
                { new Foo(1), new Foo("One") },
                { new Foo(2), new Foo("Two") },
                { new Foo(3), new Foo("Three") }
            };
            </code></example></para>
        <para> Use the single-parameter constructor to create a collection of equivalence classes which contains one single object instance each. <example><code>
            var collection = new EquivalenceClassCollection&lt;Foo&gt;(new Foo(1), new Foo(2), new Foo(3));
            </code></example></para>
      </summary>
      <typeparam name="T">The type of equivalent object instances.</typeparam>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.EquivalenceClassCollection`1.EquivalenceClasses">
      <summary>Gets the equivalence classes.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EquivalenceClassCollection`1.Add(`0[])">
      <summary>Adds to the collection a new equivalence class which contains the specified objects.</summary>
      <param name="equivalentInstances">An array of equivalent instances.</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EquivalenceClassCollection`1.GetEnumerator">
      <summary>Returns a strongly-typed enumerator that iterates through the collection.</summary>
      <returns>A strongly-typed enumerator</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.ExceptionContract`1">
      <summary>
        <para> Contract for verifying the implementation of a custom exception type. </para>
        <para> Built-in verifications: <list type="bullet"><item><name>HasSerializableAttribute</name><description>The exception type has the <see cref="T:System.SerializableAttribute" /> attribute. Disable that test by settings the <see cref="P:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.ImplementsSerialization" /> property to <c>false</c>.</description></item><item><name>HasSerializationConstructor</name><description>The exception type has a protected serialization constructor similar to <see cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />. Disable that test by settings the <see cref="P:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.ImplementsSerialization" nolink="true" /> property to <c>false</c>.</description></item><item><name>IsDefaultConstructorWellDefined</name><description>The exception type has a default parameter-less constructor. When the <see cref="P:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.ImplementsSerialization" nolink="true" /> property is set to <c>true</c> as well, the method verifies that the properties of the exception are preserved during a roundtrip serialization. Disable the test by settings the <see cref="P:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.ImplementsStandardConstructors" /> property to <c>false</c>. </description></item><item><name>IsMessageConstructorWellDefined</name><description>The exception type has single argument constructor for the message. When the <see cref="P:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.ImplementsSerialization" nolink="true" /> property is set to <c>true</c> as well, the method verifies that the properties of the exception are preserved during a roundtrip serialization. Disable the test by settings the <see cref="P:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.ImplementsStandardConstructors" nolink="true" /> property to <c>false</c>. </description></item><item><name>IsMessageAndInnerExceptionConstructorWellDefined</name><description>The exception type has two parameters constructor for the message and an inner exception. When the <see cref="P:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.ImplementsSerialization" nolink="true" /> property is set to <c>true</c> as well, the method verifies that the properties of the exception are preserved during a roundtrip serialization. Disable the test by settings the <see cref="P:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.ImplementsStandardConstructors" nolink="true" /> property to <c>false</c>. </description></item></list></para>
        <example> The following example shows a simple custom exception class with some basic serialization support, and a test fixture which uses the exception contract to test it. <code>
            [Serializable]
            public class SampleException : Exception, ISerializable
            {
                public SampleException()
                {
                }
            
                public SampleException(string message)
                    : base(message)
                {
                }
            
                public SampleException(string message, Exception innerException)
                    : base(message, innerException)
                {
                }
            
                protected SampleException(SerializationInfo info, StreamingContext context)
                    : base(info, context)
                {
                }
            
                public override void GetObjectData(SerializationInfo info, StreamingContext context)
                {
                    base.GetObjectData(info, context);
                }
            }
            
            public class SampleExceptionTest
            {
                [VerifyContract]
                public readonly IContract ExceptionTests = new ExceptionContract&lt;SampleException&gt;()
                {
                    ImplementsSerialization = true, // Optional (default is true)
                    ImplementsStandardConstructors = true // Optional (default is true)
                };
            }
            </code></example>
      </summary>
      <typeparam name="TException">The target custom exception type.</typeparam>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.ImplementsSerialization">
      <summary>
        <para> Determines whether the verifier will check for the serialization support. The default value is 'true'. </para>
        <para> Built-in verifications: <list type="bullet"><item>The exception implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</item><item>The exception has the <see cref="T:System.SerializableAttribute" /> attribute.</item><item>The exception type has a protected serialization constructor similar to <see cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />.</item></list></para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.ImplementsStandardConstructors">
      <summary>
        <para> Determines whether the verifier will check for the presence of the recommended standard constructors. The default value is 'true'. </para>
        <para> Built-in verifications: <list type="bullet"><item>The exception has a default parameter-less constructor.</item><item>The exception has a single parameter constructor for the message.</item><item>The exception two parameters constructor for the message and an inner exception.</item></list></para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.GetContractVerificationTests">
      <summary>Gets an enumeration of test cases whose purpose is to verify the contract.</summary>
      <returns>An enumeration of tests</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.RoundTripSerialize(System.Exception)">
      <summary>Performs round-trip serialization of the exception and returns the result.</summary>
      <param name="instance">The exception instance.</param>
      <returns>The instance produced after serialization and deserialization</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.ImmutabilityContract`1">
      <summary>
        <para> Contract for verifying the implementation of an immutable type. </para>
        <para> Built-in verifications: <list type="bullet"><item><term>AreReadOnlyFields</term><description>All the public and non-public instance fields are marked as read only. The evaluation is made recursively on the field types too.</description></item><item><term>HasNoPublicPropertySetter</term><description>The type does not have any public property setter. The evaluation is made recursively on the property types too.</description></item></list></para>
        <example> The following example shows a simple immutable class with all the instance fields marked as read only, and a test fixture which invokes the immutability contract to test the class. <code>
             public class SampleImmutable
             {
                 private readonly int number;
                 private readonly string text;
             
                 public SampleImmutable(int number, string text)
                 {
                     this.number = number;
                     this.text = text;
                 }
             }
            
             public class SampleImmutableTest
             {
                 [VerifyContract]
                 public readonly IContract ImmutabilityTests = new ImmutabilityContract&lt;SampleImmutable&gt;();
             }
             </code></example>
      </summary>
      <typeparam name="TTarget">The target immutable type.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ImmutabilityContract`1.GetContractVerificationTests">
      <summary>Gets an enumeration of test cases whose purpose is to verify the contract.</summary>
      <returns>An enumeration of tests</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute">
      <summary>Verifies that a contract has been satisfied. The contract is described by a value assigned to a field of the test fixture.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.IsPrimary">
      <summary>
        <para> Returns true if this is a primary pattern. </para>
        <para> A primary pattern is a pattern that defines the ultimate purpose of a code element and the nature of the tests or test parameters that are produced from it. Consequently the primary pattern is the only one on which the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)" /> method will be called. </para>
        <para> Each code element may have at most one primary pattern. It is an error for a code element to have more than one associated primary pattern. </para>
        <para> If a code element does not have an associated primary pattern, its containing test may choose to apply default processing to it instead. For example, the containing test may give an opportunity to patterns associated with the code element to consume a test method parameter but will revert to default behavior if no primary patterns explicitly claim it. </para>
        <para> Non-primary patterns still play a very important part in the construction of the test model. Non-primary patterns may implement the <see cref="M:Gallio.Framework.Pattern.IPattern.Process(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)" /> method to decorate tests and test parameters declared by the primary pattern. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)">
      <summary>
        <para> Consumes a code element and applies its contributions to the scope provided by a containing pattern. </para>
        <para> This method is used to declare new tests, test parameters and other components and add them to a containing test that was defined in some other scope. </para>
        <para> For example, when enumerating test fixtures, the assembly-level pattern will call the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)" /> method of the primary patterns associated with each type in an assembly. Some of these patterns will create new test fixture objects and add them as children of the containing assembly-level test. They will then call the <see cref="M:Gallio.Framework.Pattern.IPattern.Process(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.ICodeElementInfo)" /> method of each non-primary pattern associated with the type within the scope of the test fixture. Then they will typically recurse into the fixture to apply contributions defined by patterns associated with methods, fields, properties, events, constructors and generic type parameters. </para>
      </summary>
      <param name="containingScope">The containing scope</param>
      <param name="codeElement">The code element to process</param>
      <param name="skipChildren">If true, skips generating child test components. Instead the children may be populated on demand using <see cref="M:Gallio.Framework.Pattern.IPatternScope.AddDeferredComponentPopulator(Gallio.Framework.Pattern.DeferredComponentPopulator)" />. The implementation may safely ignore the value of this flag so long as subsequent attempts to populate children on demand are idempotent (do nothing or have no adverse side-effects).</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.InitializeTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.IFieldInfo)">
      <summary>Initializes a test for a contract verifier field after it has been added to the test model.</summary>
      <param name="fieldScope">The field scope</param>
      <param name="field">The field</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.IsTest(Gallio.Framework.Pattern.IPatternEvaluator,Gallio.Reflection.ICodeElementInfo)">
      <summary>Returns true if the code element represents a test.</summary>
      <param name="evaluator">The evaluator</param>
      <param name="codeElement">The code element</param>
      <returns>True if the code element represents a test</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.SetTestSemantics(Gallio.Framework.Pattern.ITestBuilder,Gallio.Reflection.IFieldInfo)">
      <summary>Establishes the semantics of the contract verifier.</summary>
      <param name="testBuilder">The test builder</param>
      <param name="field">The field</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Reflection.IFieldInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="field">The field</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly</exception>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.IContract">
      <summary>Describes a contract that can be verified.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.IContract.GetContractVerificationTests">
      <summary>Gets an enumeration of test cases whose purpose is to verify the contract.</summary>
      <returns>An enumeration of tests</returns>
    </member>
    <member name="T:MbUnit.Framework.Reflection.ReflectionException">
      <summary>Indicates that a reflection operation performed by <see cref="T:MbUnit.Framework.Reflection.Reflector" /> failed.</summary>
    </member>
    <member name="T:MbUnit.Framework.Reflection.Reflector">
      <summary>Helps to test non-public classes and class members.</summary>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.CreateInstance(System.String,System.String)">
      <summary>Create Instance</summary>
      <param name="assemblyName">Full assembly path.</param>
      <param name="typeName">Type Name such as (System.String)</param>
      <returns>Newly created object.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.CreateInstance(System.String,System.String,System.Object[])">
      <summary>Create Instance</summary>
      <param name="assemblyName">Full assembly path.</param>
      <param name="typeName">Type Name such as (System.String)</param>
      <param name="args">Constructor parameters.</param>
      <returns>Newly created object.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.Object,System.String)">
      <summary>Get public, non-public, or static field value.</summary>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field name.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String)">
      <summary>Get field value.</summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field name.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Boolean)">
      <summary>Get field value.</summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field name.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.String)">
      <summary>Get public, non-public, or static field value.</summary>
      <param name="fieldName">Field name.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.String,MbUnit.Framework.Reflection.AccessModifier)">
      <summary>Get field value.</summary>
      <param name="fieldName">Field name.</param>
      <param name="access">Specify field access modifier.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.String,MbUnit.Framework.Reflection.AccessModifier,System.Boolean)">
      <summary>Get field value.</summary>
      <param name="fieldName">Field name.</param>
      <param name="access">Specify field access modifier.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(System.Object,System.String)">
      <summary>Get Property Value</summary>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String)">
      <summary>Get Property Value</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object that has the property.</param>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Boolean)">
      <summary>Get Property Value</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object that has the property.</param>
      <param name="propertyName">Property Name.</param>
      <param name="lookInBase">Set to true if need look for the property in base classes.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(System.String)">
      <summary>Get Property Value</summary>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.String)">
      <summary>Get Property Value</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Boolean)">
      <summary>Get Property Value</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="propertyName">Property Name.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.Object,System.String)">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.Object,System.String,System.Object[])">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object[])">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="access">Specify method access modifier.</param>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Boolean,System.Object[])">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="access">Specify method access modifier.</param>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call</param>
      <param name="lookInBase">Speicifies if to search for the method in the base classes or not.</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.String)">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="methodName">Method to call</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.String,System.Object[])">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="methodName">Method to call</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Object[])">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="methodName">Method to call</param>
      <param name="access">Specify method access modifier.</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(System.Object,System.String,System.Object)">
      <summary>Set field value.</summary>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object)">
      <summary>Set field value.</summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object,System.Boolean)">
      <summary>Set field value.</summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(System.String,System.Object)">
      <summary>Set field value.</summary>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Object)">
      <summary>Set field value.</summary>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
      <param name="access">Specify field access modifier.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(System.Object,System.String,System.Object)">
      <summary>Set Property value.</summary>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object)">
      <summary>Set Property value.</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object,System.Boolean)">
      <summary>Set Property value.</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
      <param name="lookInBase">Set to true if need look for the property in base classes.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(System.String,System.Object)">
      <summary>Set Property value.</summary>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Object)">
      <summary>Set Property value.</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
    <member name="T:MbUnit.Framework.Reflection.AccessModifier">
      <summary>Access modifier of a class or class member.</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.Public">
      <summary>public</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.NonPublic">
      <summary>protected, internal, private</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.Static">
      <summary>static</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.Default">
      <summary>default that includes public, protected, internal, private, and static</summary>
    </member>
    <member name="T:MbUnit.Framework.Reflection.MemberType">
      <summary>Member types of a class.</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.MemberType.Method">
      <summary>Method</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.MemberType.Field">
      <summary>Field or variable</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.MemberType.Property">
      <summary>Property</summary>
    </member>
    <member name="T:MbUnit.Framework.Xml.XmlSerializationAssert">
      <summary>Assertions based on Xml serialization. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.Xml.XmlSerializationAssert.AreEqualAfterRoundTrip``1(``0)">
      <summary>Performs XML serialization then deserialization of the specified object then compares the object to ensure that it equals the original.</summary>
      <typeparam name="T">The type of object to serialize</typeparam>
      <param name="obj">The object</param>
      <returns>The deserialized object after serialization</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="obj" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Xml.XmlSerializationAssert.IsXmlSerializable(System.Type)">
      <summary>Asserts that an <see cref="T:System.Xml.Serialization.XmlSerializer" /> can be produced for a <see cref="T:System.Type" />.</summary>
      <param name="t">The type to check</param>
    </member>
    <member name="M:MbUnit.Framework.Xml.XmlSerializationAssert.RoundTrip``1(``0)">
      <summary>Performs XML serialization then deserialization of the specified object.</summary>
      <typeparam name="T">The type of object to serialize</typeparam>
      <param name="obj">The object</param>
      <returns>The deserialized object after serialization</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="obj" /> is null</exception>
    </member>
  </members>
</doc>